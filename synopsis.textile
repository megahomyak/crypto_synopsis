h3. Resources

Very good web3 info source, in Russian: https://www.youtube.com/channel/UCmizxCJ2qgvvm8AvFzzdt5g

h1. Basic terminology

- Hash := A fixed-width product of a one-way function.
- Nonce := A number that is added to the block to make its hash acquire some specific properties, which define the block as valid.
- Block := A data structure containing its number (so that the valid block cannot just be sent twice), some arbitrary data, a hash of its parent and nonce.
- Blockchain := A sequence of blocks, chained using their parents' hashes.
- Transaction := A piece of data, incorporated in sequences into a block, that states what amount of currency have been transferred from who to who.

h1. Digital signatures

- A key pair := Two pieces of information that, when passed into a cryptographic function, can respectively decrypt and encrypt the same data. Basically, they reverse the product of each other.
- Public key := A key that is accessible by anyone.
- Private key := A key that is stored privately.
- Digital signature := A hash of the document embedded with the document itself, encrypted with one of the keys.

Signed transaction contains the information about:
* The amount of currency
* To whom it's been sent
* The public key of the user
* The signature: all the information above, hashed and signed with a private key

h1. Some ways to acquire consensus

h2. Proof of work

The miner should add a nonce to the block, so that the block's hash has some special properties (for example, a lot of zeros at the beginning).
The longest chain of blocks is trusted, so sometimes there will be a tie.

h2. Proof of stake

People vote with their cryptocurrencies for the block producers, getting a fee from each new block in return.
Some block producers are elected, but only one of them produces blocks at a single moment of time, others just sign the produced blocks. Not all the others should sign the block for it to be valid, only a part of the group is needed.
If a block producer misbehaves, he is punished by the rules of the blockchain where it took place.
The aspects of this one highly depend on the chosen blockchain network.

h1. Smart contracts (from Ethereum)

Smart contract is a piece of bytecode stored on the blockchain.
It has its own address.
Users can call functions from that contract, but they have to pay for the performed operations.
Every operation has a "gas value".
More difficult or blockchain-space-consuming operations have a higher gas value.
Contract function callers must pay for the consumed gas. Remaining currency is returned to the caller.
If too little gas is specified, it will be wasted.
Contracts' functions are atomic: either they complete successfully and their results are merged with the blockchain, or the gas is burned for nothing (the caller's money are, thus, also burned).
Solidity (Etherium's language for smart contracts) has `assert()` and `require()` functions. When `false` is received, the first function burns all the gas, and the second one returns the remaining gas to the caller.
The caller decides the amount of ETH to pay for one unit of gas. Miner wants to choose the most expensive transactions, so the higher the gas price - the more chances the transaction has to get in the block.
All of the performed operations are visible on the blockchain, and other miners are validating them when signing a block, just like with the other blockchain operations.
In order to determine that the block with the contract execution steps is valid, the validator has to re-execute the contract on the same state of blockchain network as it was when the contract was initially executed and then compare the resulting operations to the operations published by the original executor.
